worker_processes auto;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    
    # 性能調優
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    include       mime.types;
    types {
        application/javascript js mjs;
        text/css               css;
        image/svg+xml          svg;
    }
    default_type  application/octet-stream;

    server {
        listen 80 reuseport;
        server_name localhost;
        root html;

        # 動態 Nonce 生成
        set_by_lua $nonce '
            local f = io.open("/dev/urandom", "rb")
            if not f then return ngx.exit(500) end
            local bytes = f:read(16)
            f:close()
            return ngx.encode_base64(bytes):gsub("[+/=]", ""):sub(1, 16)
        ';

        # 安全頭部
        add_header Content-Security-Policy "script-src 'nonce-$nonce' 'strict-dynamic'; style-src 'self'; object-src 'none'; base-uri 'none';";
        add_header X-Content-Type-Options "nosniff";
        add_header X-Frame-Options "DENY";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        location / {
            try_files $uri $uri/ /index.html;

            # Nonce 注入
            sub_filter 'NONCE_PLACEHOLDER' $nonce;
            sub_filter_once off;

            # 緩存控制
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }

        # 靜態資源長期緩存
        location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff2)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location ~ \.js$ {
            add_header Content-Type application/javascript;
        }
    }
}